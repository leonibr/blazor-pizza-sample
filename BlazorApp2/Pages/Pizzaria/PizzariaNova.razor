@page "/pizza/nova"

@attribute [Authorize]


@inject PizzaContext dbContext
@inject NavigationManager navigation

<h3>Cadastra Pizza</h3>

<EditForm Model="Model" OnValidSubmit="EnviarNovaPizza">
    <DataAnnotationsValidator />
    @if(Model.IsLoading)
    {
        <h3>Enviando dados...</h3>
    }
    <div class="row">
        <div class="col-sm-4">
            <label>Nome</label>
            <InputText type="text" class="form-control" @bind-Value="Model.Nome" disabled="@Model.IsLoading"/>
            <ValidationMessage class="invalid-feedback" For="() => Model.Nome" />
        </div>
        <div class="col-sm-2">

            <label>Preço</label>
            <InputNumber type="text" class="form-control" @bind-Value="Model.PrecoBase" disabled="@Model.IsLoading"/>
            <ValidationMessage class="invalid-feedback" For="() => Model.PrecoBase" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-4">

            <label>Descrição</label>
            <InputText type="text" class="form-control" @bind-Value="Model.Descricao" disabled="@Model.IsLoading"/>
            <ValidationMessage class="invalid-feedback"
                               For="() => Model.Descricao" />


            <label>Url Imagem</label>
            <InputText type="text" class="form-control" @bind-Value="Model.ImageUrl" disabled="@Model.IsLoading"/>
            <ValidationMessage class="invalid-feedback" For="() => Model.ImageUrl" />

        </div>
        <div class="col-sm-2">
            <label>Imagem</label>
            @if (Model.ImageUrl?.Length > 0)
            {

                <img src="@Model.ImageUrl" class="rounded" style="width:100%;height:auto" alt="Pré visualização da Imagem" />
            }
            else
            {
                <div class="img-vazia"></div>
            }
        </div>

    </div>


    <div class="row mt-5">
        <div class="col-sm-6">
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary"
                        type="submit" disabled="@Model.IsLoading">Salvar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    protected record NovaPizza
    {
        [Required(ErrorMessage = "Por favor informe o nome")]
        public string Nome { get; set; }


        [Required(ErrorMessage = "Informe o preço base")]
        [Range(0.01, 1000.0, ErrorMessage = "Valor inválido")]
        public decimal PrecoBase { get; set; }

        [Required(ErrorMessage = "Descrição é importante")]
        public string Descricao { get; set; }


        public string ImageUrl { get; set; }

        public bool IsLoading { get; set; } = false;
    }

    protected NovaPizza Model = new NovaPizza();

    protected async Task EnviarNovaPizza()
    {
        Model.IsLoading = true;       
        dbContext.Pizzas.Add(new BlazorApp2.Model.Pizza()
        {
            Nome = Model.Nome,
            Descricao = Model.Descricao,
            ImageUrl = Model.ImageUrl,
            PrecoBase = Model.PrecoBase,
        });
        await dbContext.SaveChangesAsync();
        Model = new NovaPizza();
        Model.IsLoading = false;
        navigation.NavigateTo("/pizza/lista");
    }
}
